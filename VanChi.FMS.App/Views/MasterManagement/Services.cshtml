@{
    ViewBag.Title = "DialogTemplateEdit";
}

@using Syncfusion.EJ2
@using Syncfusion.EJ2.DropDowns
@using VanChi.Data

<div class="col-lg-12 control-section">
    <div class="row">
        <div class="col-xs-3 col-sm-3 col-lg-3 col-md-3">
            @Html.EJS().ComboBox("country").Placeholder("Select a country").PopupHeight("auto").AllowCustom(false).Change("countrychange").DataSource((IEnumerable<CountryDTO>
                   )ViewBag.country).Fields(new ComboBoxFieldSettings { Text = "Name", Value = "Id" }).Render()
        </div>

        <div class="col-xs-3 col-sm-3 col-lg-3 col-md-3">
            @Html.EJS().ComboBox("city").Placeholder("Select a state").Enabled(false).AllowCustom(false).PopupHeight("auto").DataSource((IEnumerable<CityDTO>)ViewBag.city).Fields(new ComboBoxFieldSettings { Text = "Name", Value = "Id" }).Render()
        </div>
        <div class="col-xs-6 col-sm-6 col-lg-6 col-md-6">
            @Html.EJS().TextBox("search").Placeholder("Search").Render()
        </div>
    </div>
</div>
@section ControlsSection{
    @Html.EJS().Button("refresh").Content("Refresh").Render()
    <div class="control-section">

        @*@Html.EJS().Grid("DialogTemplateEdit").DataSource(ds => dsUrl(@Url.Action("ServicesDatasource", "MasterManagement")).UpdateUrl(@Url.Action("Update", "MasterManagement")).Adaptor("UrlAdaptor")).AllowSorting().ActionComplete("actionComplete").Columns(col =>*@
        @Html.EJS().Grid("DialogTemplateEdit").DataSource(ds => ds.Url(@Url.Action("ServicesDatasource", "MasterManagement")).UpdateUrl(@Url.Action("Update", "MasterManagement")).InsertUrl(@Url.Action("Insert", "MasterManagement")).RemoveUrl(@Url.Action("Remove", "MasterManagement")).Adaptor("UrlAdaptor")).AllowSorting().ActionComplete("actionComplete").Columns(col =>
   {
       col.Field("OrderID").HeaderText("Order ID").IsPrimaryKey(true).Width("120").ValidationRules(new { required = true, number = true }).TextAlign(Syncfusion.EJ2.Grids.TextAlign.Right).Add();
       col.Field("CustomerID").HeaderText("Customer Name").Width("150").ValidationRules(new { required = true, minLength = 3 }).Add();
       col.Field("Freight").HeaderText("Freight").Width("120").EditType("numericedit").Format("C2").TextAlign(Syncfusion.EJ2.Grids.TextAlign.Right).Add();
       col.Field("OrderDate").HeaderText("Order Date").EditType("datepickeredit").Format("yMd").Width("150").Add();
       col.Field("ShipCountry").HeaderText("Ship Country").EditType("dropdownedit").Width("150").Add();
   }).AllowPaging(true).PageSettings(page => page.EnableQueryString(true).PageSize(20)).EditSettings(edit => { edit.AllowAdding(true).AllowEditing(true).AllowDeleting(true).ShowDeleteConfirmDialog(true).Mode(Syncfusion.EJ2.Grids.EditMode.Dialog).Template("#dialogtemplate"); }).Toolbar(new List<string>() { "Add", "Edit", "Delete", "Search" }).Created("created").Render()
    </div>

    <script type="text/javascript">
        function countrychange() {
            var city = document.getElementById('city').ej2_instances[0];
            var country = document.getElementById('country').ej2_instances[0];
            // disable the city DropDownList
            city.enabled = true;
            // frame the query based on selected value in country DropDownList.
            var tempQuery = new ej.data.Query().where('CountryXid', 'equal', country.value);
            // set the framed query based on selected value in country DropDownList.
            city.query = tempQuery;
            // set null value to state DropDownList text property
            city.text = null;
            // bind the property changes to state DropDownList
            city.dataBind();
        }
        /////////
            var columnorder;
            document.getElementById("refresh").addEventListener("click", () => {
            var grid = document.getElementById("DialogTemplateEdit").ej2_instances[0];
            var fn = $("#firstname").val();
            grid.query = new ej.data.Query().addParams('custom', { age: 12, name: fn, born: new Date() });
            grid.refresh();

            debugger;
            //            $.ajax({
            //                url: "/Home/ServicesDatasource",
            //            type: "POST",
            //            datatype: "json",
            //            contentType: "application/json; charset=utf-8",
            //                data: JSON.stringify({gid: JSON.stringify(grid.dataSource) }),
            //                success: function (result) {
            //                    debugger;
            //        }
            //});
        });
        function complete(args) {
            if (args.requestType == "save") {
                //Your dialog model to display the message after successful insert and edit actions
            }
        }
        function created(args) {
        }
        function actionComplete(args) {
            if (args.requestType === 'beginEdit' || args.requestType === 'add') {
                let spinner = ej.popups.createSpinner({ target: args.dialog.element });
                ej.popups.showSpinner(args.dialog.element);
                if (args.requestType === 'beginEdit') {
                    var ajax = new ej.base.Ajax({
                        url: "@Url.Action("Editpartial", "MasterManagement")", //render the partial view
                        type: "POST",
                        contentType: "application/json",
                        data: JSON.stringify({ value: args.rowData })
                    });
                    ajax.send().then(function (data) {
                        $("#dialogTemp").html(data); //Render the edit form with selected record
                        args.form.elements.namedItem('CustomerID').focus();
                        ej.popups.hideSpinner(args.dialog.element);
                    }).catch(function (xhr) {
                        console.log(xhr);
                        ej.popups.hideSpinner(args.dialog.element);
                    });
                    //ajax.successHandler = function (data) {

                    //};
                }
                if (args.requestType === 'add') {
                    var ajax = new ej.base.Ajax({
                        url: "@Url.Action("Addpartial", "MasterManagement")", //render the partial view
                        type: "POST",
                        contentType: "application/json",
                    });
                    ajax.send().then(function (data) {
                        $("#dialogTemp").html(data); //Render the edit form with selected record
                        args.form.elements.namedItem('OrderID').focus();
                        ej.popups.hideSpinner(args.dialog.element);
                    }).catch(function (xhr) {
                        console.log(xhr);
                        ej.popups.hideSpinner(args.dialog.element);
                    });
                }
            }
            if (args.requestType === 'Edit') {
                alert("Edit");
            }
            if (args.requestType == "save") {
                if (args.action === 'add') {
                }
                else if (args.action === 'edit')  {

                }
                //Your dialog model to display the message after successful insert and edit actions
            }
        }
    </script>

    <style>
        .form-group.col-md-6 {
            width: 250px;
        }

        #ShipAddress {
            resize: vertical;
        }

        :-ms-fullscreen, .e-dialog {
            max-width: 552px;
        }

        @@media only screen and (max-width: 991px) {
            .e-dialog.e-control.e-popup {
                min-width: 300px !important;
            }
        }

        @@media only screen and (min-width: 992px) {
            .e-dialog.e-control.e-popup {
                min-width: 550px !important;
                min-height: 415px;
            }

            .e-bigger.e-dialog.e-control.e-popup,
            .e-bigger .e-dialog.e-control.e-popup {
                min-height: 496px;
            }
        }
    </style>

    <script id='dialogtemplate' type="text/x-template">
        <div id="dialogTemp">
        </div>
    </script>
}
@*@section ActionDescription{
        <div id="action-description">
            <p>This sample demonstrates CRUD operations in Grid with Dialog Template. You can perform CRUD operations as follows,</p>
            <ul>
                <li><code>Add</code> -  To add new record, click Add toolbar button </li>
                <li><code>Edit</code> - To edit record, double click a row or click toolbar Edit button after selected a row </li>
                <li><code>Delete</code> - To delete record, click toolbar Delete button after selected a row </li>
                <li><code>Update</code>,<code>Cancel</code> - You can save or discard changes by click toolbar Update and Cancel button respectively</li>
            </ul>
        </div>
    }*@

@*@section Meta{
        <meta name="description" content="This demo for Essential JS 2 grid control shows how to edit the grid rows using Essential JS 2 dialog-template." />
    }*@

@*@section Description{
        <div id="description">
            <p>
                The Grid supports CRUD operations. This CRUD operations can be configured in Grid using
                <code> editSettings </code>.
            </p>
            <p>
                In this demo, Dialog template is enabled for editing by defining <code>
                    editSettings.mode
                </code> as <code>Dialog</code> and <code>
                    editSettings.template
                </code> as SCRIPT element`s ID which holds the template. You can start editing by double clicking a row or clicking on toolbar's <code> Edit </code>
                button, then the currently selected row will be shown on a dialog with custom elements and you can change the row values and save edited data to the datasource.
            </p>
        </div>
    }*@
